// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../ERD.svg"
  includeRelationFromFields = true
  theme                     = "dark"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProgramLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ExerciseType {
  WARMUP
  COOLDOWN
  MAINSET
}

enum Unit {
  m // meters
}

enum Accessory {
  FINS
  PULLBUOY
  KICKBOARD
  KICKBOARD_FINS
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  auth0Id   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statusPosts         StatusPost[]
  journey             Journey[]
  UserSwimActivityLog UserSwimActivityLog[]
}

model StatusPost {
  id        String   @id @default(uuid())
  msg       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

// essentially swim programs (with weeks of programs)
model SwimCategory {
  id           String       @id @default(uuid())
  category     ProgramLevel
  descriptions String[]
  url          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  programs Program[]
  Journey  Journey[]
}

// week plans inside the swim program 
model Program {
  id        String   @id @default(uuid())
  name      String
  order     Int // e.g. week 1, 2, 3 etc.
  reps      Int      @default(2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  swimCategory   SwimCategory @relation(fields: [swimCategoryId], references: [id])
  swimCategoryId String

  swimExercise SwimExercise[]
  Journey      Journey[]
}

// exercises within each program/week of the week plan 
model SwimExercise {
  id           String       @id @default(uuid())
  exerciseType ExerciseType
  sets         Int
  distance     Int
  unit         Unit
  accessory    Accessory?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
}

model Journey {
  id                   String   @id @default(uuid())
  isActive             Boolean
  isCompleted          Boolean  @default(false)
  // completed steps (programIds) of swimCategoryId (swim plan/program)
  completedProgramIds  String[] @default([]) // put id of Program (get all Programs related to the SwimCategory for progress (amount in completed/total; calculate at runtime)
  currActiveProgramRep Int      @default(0)
  timeRepLastCompleted DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // current program/plan user is following
  swimCategory   SwimCategory @relation(fields: [swimCategoryId], references: [id], onDelete: Cascade)
  swimCategoryId String

  // current step in the program/plan user is at 
  program             Program @relation(fields: [currActiveProgramId], references: [id], onDelete: Cascade)
  currActiveProgramId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model UserSwimActivityLog {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  totalDistanceSwam Int
  unit              Unit

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
