// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../ERD.svg"
  includeRelationFromFields = true
  theme                     = "dark"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProgramLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ExerciseType {
  WARMUP
  COOLDOWN
  MAINSET
}

enum Unit {
  m // meters
}

enum Accessory {
  FINS
  PULLBUOY
  KICKBOARD
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  auth0Id     String       @unique
  statusPosts StatusPost[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model StatusPost {
  id        Int      @id @default(autoincrement())
  msg       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model SwimCategory {
  id           Int          @id @default(autoincrement())
  category     ProgramLevel
  descriptions String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  programs Program[]
}

model Program {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  swimCategory   SwimCategory @relation(fields: [swimCategoryId], references: [id])
  swimCategoryId Int

  swimExercise SwimExercise[]
}

model SwimExercise {
  id           Int          @id @default(autoincrement())
  exerciseType ExerciseType
  sets         Int
  distance     Int
  unit         Unit
  accessory    Accessory?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  program   Program @relation(fields: [programId], references: [id])
  programId Int
}
